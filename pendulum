#!/usr/bin/env zsh
#
# Copyright (C) 2016 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# This standalone program runs every N seconds and gathers current
# information on network objects, updating it in redis


source /usr/local/dowse/zshrc

[[ -r $H/run/redis-server.pid ]] || {
	error "Dowse is not running"
	error "pid not found: $H/run/redis-server.pid"
	return 1 }

# gather_network_info fills in global maps
net_devices=()
net.scan_devices
net_ip4_addr=()
net.scan_addresses

now=`date --utc +'%s'`

pendulum_ip_to_network() {
    fn pendulum_ip_to_network $*
    local _addr="$1"
    req=(_addr)
    ckreq || return $?
    print "${_addr[(ws:.:)1]}.${_addr[(ws:.:)2]}.${_addr[(ws:.:)3]}.0/24"
}


_pendulum_resolve_hostname() {
    fn pendulum_resolve_hostname $*
    [[ "$obj[ip4]" = "" ]] && return 1

    hh="`host $obj[ip4] | awk '
/NXDOMAIN/ { exit }
{ print $NF }'`"
    # hh[${#hh}]='\0'
    [[ "$hh" = "" ]] || {
        obj[hostname]=${hh%%.*}
    }
}

_pendulum_commit_changes() {
    fn pendulum_commit_changes $*
    [[ "$sqlquery" = "" ]] && return 0

    print - "$sqlquery" | $sql $db[things]

    sqlquery=""
}

_pendulum_update_changes() {
    fn pendulum_update_changes $*
    macaddr="$obj[macaddr]"
    req=(macaddr)
    ckreq || return $?

    [[ "$macaddr" = "NULL"     ]] && return 1
    [[ "$macaddr" = "FAILED"     ]] && return 1
    [[ "$macaddr" = "INCOMPLETE" ]] && return 1

    local info
    info=`print - "SELECT * from found where macaddr = '$obj[macaddr]';" | $sql $db[things]`

    local nownow
    nownow=`date --utc '+%Y-%m-%dT%H:%M:%S'`

    local name
    name=${obj[hostname]}

    if [[ ${#info} = 0 ]]; then
        act "new: ${obj[macaddr]} ${obj[hostname]:-${obj[ip4]}} :: ${obj[os]}"
        # no records found, this is a new one

        sqlquery+="
INSERT IGNORE into found (macaddr,ip4,iface,hostname,state,last,age)
values('$obj[macaddr]','$obj[ip4]','$obj[iface]','$obj[hostname]','$obj[state]','$nownow','$nownow');"


        # TODO: send event to redis
        continue
    else
        sqlquery+="
UPDATE found SET last = '$nownow' WHERE macaddr = '$obj[macaddr]';"
    fi

    # check all changes on each property one by one
    for i in "${(f)$(print $info | sql_idx_parse $R/db/thing.idx)}"; do
        [[ "$i" = "" ]] && continue
        # tokenize for easier handling
        strtok "$i" ' '
        _k="${tok[1]}"

        # skip if new object scan contains NULL info
        [[ "${obj[$_k]}"  = "NULL" ]] && continue

        # skip last here because we always update it
        [[ "$_k" = "last" ]] && continue

        # skip macaddr since its the identifier
        [[ "$_k" = "macaddr" ]] && continue

        tok[1]=()
        # shift in case values contain more than one string with spaces
        _v="${tok}"


        [[ "$obj[$_k]" = "" ]] || { # key is defined in object
            func "$_k = $_v -> $obj[$_k] "

            [[ "$obj[$_k]" = "$_v" ]] || {
                # values differ

                # TODO: send events to redis
                warning "$name change $_k: $_v -> $obj[$_k]"

                # update in database
                sqlquery+="
UPDATE found SET $_k = '$obj[$_k]' WHERE macaddr = '$obj[macaddr]';"

            }

            # delete from object as done
            obj[$_k]=""
        }
    done


    # for _k in ${(k)obj}; do
    #     act "analysis $_k = $obj[$_k]"
    # done

    # update all informations that are left in object
    for _k in ${(k)obj}; do

        [[ "$_k" = "macaddr" ]] && continue
        [[ "${obj[$_k]}" = "" ]] && continue

        warning "leftover: $_k = $obj[$_k]"
        sqlquery+="
UPDATE found SET $_k = '$obj[$_k]' WHERE macaddr = '$obj[macaddr]';"
    done


}

# finds out LAN neighbours, their mac and their state
# this establishes mac addresses as indexes
pendulum_ip_neigh() {
    fn pendulum_ip_neigh $*

    for o in ${(f)"$(launch ip neigh)"}; do
        func "$o"


        # not interesting if no mac found (REVIEW)
        obj[macaddr]="${o[(w)5]}"
        [[ "$obj[mac]" = "FAILED" ]] && continue

        # get the ip address
        if [[ "$o{[(w)1]}" =~ "::" ]]; then
            obj[ip6]="${o[(w)1]}"
        else
            obj[ip4]="${o[(w)1]}"
        fi

        # we keep track only of ipv4 on the LAN for now
        [[ "${obj[ip4]}" = "" ]] && continue

        obj[iface]="${o[(w)3]}"

        obj[state]="${o[(w)6]}"

        _pendulum_resolve_hostname

        _pendulum_update_changes

    done
}

pendulum_arp_scan() {
    fn pendulum_arp_scan $*

    ###### Active ARP scan
    ## using netdiscover, retrieves OS from MAC fingerprints
    for _dev in ${(k)net_ip4_addr}; do
        _addr=${net_ip4_addr[$_dev]}
        _net=`pendulum_ip_to_network $_addr`
        func "arp scan $_net ($_dev)"
        for t in "${(f)$(launch netdiscover -i $_dev -r $_net -P -N)}"; do
            [[ "$t" = "" ]] && continue
            [[ "$t" =~ "^--" ]] && continue
            obj[macaddr]=${t[(w)2]}
            obj[ip4]=${t[(w)1]}
            obj[iface]=$_dev
            obj[last]=$nownow
            obj[os]=$(print - $t | awk '
{
  for(c=5;c<=NF;c++) {
    printf("%s_", $c)
  }
}')
            _pendulum_resolve_hostname

            _pendulum_update_changes
        done
    done
}

watchdog_daemons() {
	# map all running pids
	# for p in ${(f)"$(ps -o pid ax)"}; do
	# 	[[ "$p" =~ "PID" ]] && continue
	# 	pidmap+=($p 1)

	# done
	# act "${#pidmap} pids found running"

	# generic restart of any daemon that has left pids behind
	for d in ${(f)"$(find $H/run -name '*.pid')"}; do
		func "watchdog: $d"
		# remove path prefix
		daemon=${d##*/}
		# remove .pid postfix
		daemon=${daemon%.*}
		func "daemon: $daemon"

		[[ "$daemon" = "seccrond" ]] && {
			func "watchdog skip seccrond parent"
			continue }

		pid=`cat $d`
		[[ "$pid" = "" ]] && {
			err="$d pidfile found empty"
			error $err
			print $err >> $H/log/watchdog.log
			continue
		}
		act "$pid \t $daemon"
		if [[ -r /proc/${pid}/stat ]]; then
			[[ $DEBUG = 1 ]] && {
				func "found running: $daemon"
				func "`cat /proc/$pid/cmdline`"
			}

		else
			err="$daemon not found running (crash?)"
			error $err
			print $err >> $H/log/watchdog.log
			# delete old pid
			rm -f $d
			act "attempting restart: $daemon"
			start $daemon
			if [[ $? = 0 ]]; then
				err="succesfully restarted: $daemon"
				notice $err
				print $err >> $H/log/watchdog.log
			else
				err="watchdog fails to restart: $daemon"
				error $err
				print $err >> $H/log/watchdog.log
			fi
		fi
	done

	# daemons that should always be running
	core_daemons=(redis-server dnscrypt-proxy)
	for d in $core_daemons; do
		pidfile=$H/run/$d.pid
		[[ -r $pidfile ]] || {
			start $d
			if [[ $? = 0 ]]; then
				err="succesfully restarted: $daemon"
				notice $err
				print $err >> $H/log/watchdog.log
			else
				err="watchdog fails to restart: $daemon"
				error $err
				print $err >> $H/log/watchdog.log
			fi
		}
	done
}

exec_next_cmd() {
	fn exec_next_cmd $*
	local cmd
	cmd=`launch dowse-cmd-fifo`
	[[ "$cmd" = "" ]] && return 1

	# all uppercase
	cmd=$cmd:u
	func "cmd: $cmd"

	# check if valid command (prefix CMD)
	[[ "${cmd[1,4]}" = "CMD," ]] || {
		error "invalid command: $cmd"
		return 1 }

	# TODO: ACL check if IP (2nd field) is authorised

	local action
	action=${cmd[(ws:,:)3]}
	[[ "$action" = "" ]] && {
		error "no action found: $cmd"
		return 1 }
	func "action: $action"

	# set acl on/off switch matching the action
	acl=DROP
	[[ "$action" =~ "_ON"  ]] && acl=ACCEPT
	[[ "$action" =~ "_OFF" ]] && acl=DROP

	case $action in
		IP4_OFF|IP4_ON)
			# 1st arg is the ip to block
			ipb=${cmd[(ws:,:)5]}
			[[ "$ipb" = "" ]] && {
				error "invalid ip4block cmd: $cmd"
				return 1 }
			# TODO: check if valid ip4 ip
			launch xtables-multi iptables -A FORWARD -s $ipb -j $acl
			launch xtables-multi iptables -A FORWARD -d $ipb -j $acl
		;;

		IP6_OFF|IP6_ON)
			# 1st arg is the ip to block
			ipb=${cmd[(ws:,:)5]}
			[[ "$ipb" = "" ]] && {
				error "invalid ip6block cmd: $cmd"
				return 1 }
			# TODO: check if valid ip6 ip
			launch xtables-multi ip6tables -A FORWARD -s $ipb -j $acl
			launch xtables-multi ip6tables -A FORWARD -d $ipb -j $acl
		;;

		MAC_OFF|MAC_ON)
			# 1st arg is the mac to block
			macb=${cmd[(ws:,:)5]}
			[[ "$macb" = "" ]] && {
				error "invalid macblock cmd: $cmd"
				return 1 }
			# TODO: check if valid mac
			launch ebtables -A FORWARD -s $macb -j $acl
			launch ebtables -A FORWARD -d $macb -j $acl

		;;
		DOMAIN_OFF|DOMAIN_ON)
			error "TODO: domainblock command"
		;;
		*)
			error "unknown action: $cmd"
			;;
	esac

	return 0
}

################
# MAIN functions


fn "pendulum $*"

case "$1" in

	watchdog)
		wlid=`lock watchdog 60`
		[[ $wlid = 0 ]] && {
			func "watchdog already running"
			return 1 }

		# check that all registered pids are running
		# restart them if not running (and log that)
		pidmap=()
		watchdog_daemons

		unlock watchdog $wlid
		;;

	nextcmd)
		ncmd=`lock nextcmd 0`
		[[ "$ncmd" = "0" ]] && {
			func "nextcmd is locked"
			return 1 }

		exec_next_cmd

		unlock nextcmd $ncmd

		;;

	lease)
		# called by dhcp daemon when adding a new lease
		print "PUBLISH dhcp-lease-channel $*" | redis dynamic
		# shift 1
		return 0
		;;

	nmap)
		# nlock=`lock nmap 30`
		# [[ $nlock = 0 ]] && {
		# 	func "nmap already running"
		# 	return 1 }

		nmapfile=$H/run/nmap_scan.xml
		ztmp
		processedfile=$ztmpfile

		ztmp
		varfile=$ztmpfile

		notice "Starting nmap scap of $dowse_net"
		act "results saved in $nmapfile"

 		sup nmap -vv -n -F -sS -oX $nmapfile $dowse_net

		nmap-preprocess
		nmap-parse

		rm -f "${varfile}"
		rm -f "${processedfile}"

		#		unlock nmap $nlock
		;;

    netscan)
		slid=`lock netscan 30`
		[[ $? = 0 ]] || {
			func "netscan already running"
			return 1 }

        # parse everything in this map
        obj=()
        pendulum_ip_neigh
        # pendulum_arp_scan
        _pendulum_commit_changes

		unlock netscan $slid
        ;;

    procscan)
        # TODO: pgrep
        ;;
esac
