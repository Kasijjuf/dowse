#!/usr/bin/env zsh

# sql functions

# creates a database for the current network
# uses an unique hash to the network location
sql_create_database() {
	fn sql_create_database $*
	name="$1"
	req=(name)
	ckreq || return $?
	act " Create database if not exists ..."
        print "CREATE DATABASE IF NOT EXISTS $db[$name];" | $sql 2>/dev/null
	# TODO: better check of error code if needed	
}

# Set the root password 
sql_set_root_password() {
	fn sql_set_root_password $*
	password="$1"
	setted_up="$2"
	req=(password setted_up sql_wp)
	ckreq || return $?
	act " Set the root password "
	
	[[ -r "$setted_up" ]] || {
            print "update mysql.user set password=password('"$password"') where user = 'root';flush privileges;" | $sql_wp 2>/dev/null
	    touch $setted_up ;
	}
	# TODO: better check of error code if needed	
}


# Integrate with Redis creating the function and trigger to ...
sql_integrate_with_redis() {
	fn sql_integrate_with_redis $*
	setted_up="$1"
	TRIGGER_CHANNEL="sql-trigger-channel"	
	NF=`cat $R/db/thing.idx|grep -v "^$" | wc -l`
	req=(setted_up sql TRIGGER_CHANNEL NF)
	ckreq || return $?
	act " Integrate with Redis ..."
	
	[[ -r "$setted_up" ]] || {
	    act "     * creating the function to  ..."
	    
	    print 'DROP FUNCTION IF EXISTS redis_servers_set_v2; 
	           DROP FUNCTION IF EXISTS redis_command_v2;
	           DROP FUNCTION IF EXISTS free_resources;

	           CREATE FUNCTION redis_servers_set_v2 RETURNS int SONAME "lib_mysqludf_redis_v2.so";
	           CREATE FUNCTION redis_command_v2 RETURNS int SONAME "lib_mysqludf_redis_v2.so";
	           CREATE FUNCTION free_resources RETURNS int SONAME "lib_mysqludf_redis_v2.so";'| $sql $db[things]


	    PROC="DELIMITER ##
                   DROP PROCEDURE IF EXISTS create_dns_entry; 
                   CREATE PROCEDURE create_dns_entry( IN new_name TEXT , IN new_ip4 TEXT , IN new_ip6 TEXT )
                   BEGIN
	       if (new_ip6 is not null) then
		  SET @ret= redis_command_v2(\"SET\",concat(\"dns-query-\",new_name),new_ip6);
       	       end if;
	       if (new_ip4 is not null) then
		  SET @ret= redis_command_v2(\"SET\",concat(\"dns-query-\",new_name),new_ip4);
	       end if;
                   END;##"
	    
	    act "   * creating procedure to DNS entry "

	    func $PROC
	    print $PROC | $sql $db[things]

	    
	    act "     * creating the trigger on update things  ..."

	    print "DROP TRIGGER IF EXISTS update_things;" | $sql $db[things]

	    HEADER="DELIMITER ##
		  CREATE TRIGGER update_things 
		  AFTER UPDATE ON found 
		  FOR EACH ROW 
		  BEGIN
		     SET @ret= redis_command_v2(\"publish\",\"$TRIGGER_CHANNEL\", 
		  concat_ws(',','update_things',unix_timestamp(now()),'A','U',$NF"

	    MID=`awk '/^$/ {next} 
{print ",\42"$1"\42,coalesce(OLD."$1",\47_is_null_\47),coalesce(NEW."$1",\47_is_null_\47)"}' $R/db/thing.idx`
	    
	    FOOTER="));"

	    UPDATE_NAME="
	    if (old.name<>new.name) then
	       SET @ret= redis_command_v2(\"DEL\",concat(\"dns-query-\",old.name));
               CALL create_dns_entry( new.name,new.ip4,new.ip6);
	    end if ;
	    "
	    
	    END="END##"

	    func ${HEADER}${MID}${FOOTER}${UPDATE_NAME}${END}       |cat -n
	    print ${HEADER}${MID}${FOOTER}${UPDATE_NAME}${END}       | $sql $db[things]

	    #-- Trigger fired when it's changed the level of authorization
	    #-- if it's authorized an admin it will be redirected to captive_portal_admin if and only if
	    #-- appear a new event to administrate on the network.
	    TRIGGER_ENABLE_DISABLE_AUTHORIZATION="
       DELIMITER ##
                   DROP TRIGGER IF EXISTS enable_disable_authorization;
                     CREATE TRIGGER enable_disable_authorization 
                     BEFORE UPDATE ON found
                     FOR EACH ROW
                     BEGIN
                        IF UPPER(NEW.authorized) <> UPPER(OLD.authorized) THEN
                           if (lower(NEW.admin) = 'yes') then
                             set @enable_state='admin';
                           else
                             set @enable_state='authorized_to_browse';
                           end if;

                           IF UPPER(NEW.authorized) = 'ENABLE_TO_BROWSE' THEN
                              SET @ret= redis_command_v2('SET',concat('authorization-mac-',upper(NEW.macaddr)),@enable_state);
                           ELSEIF UPPER(NEW.authorized) = 'DISABLE_TO_BROWSE' THEN
                              SET @ret= redis_command_v2('SET',concat('authorization-mac-',upper(NEW.macaddr)),'disable_to_browse');
                           ELSEIF UPPER(NEW.authorized) = 'NOT ENABLED TO BROWSE' THEN
                              SET @ret= redis_command_v2('DEL',concat('authorization-mac-',upper(NEW.macaddr)));
                           END IF;
                        END IF;
                     END;##"
	    

	    act "   * creating trigger on enable/disable authorization to browse"
	    func $TRIGGER_ENABLE_DISABLE_AUTHORIZATION
	    print $TRIGGER_ENABLE_DISABLE_AUTHORIZATION | $sql $db[things]

	    
	    # Procedure to redirect (or not) the admin which not are disable to browse, to captive_portal_admin
	    # new_state can be admin_should_check | ok 
	    PROC="DELIMITER ##
                   DROP PROCEDURE IF EXISTS redirect_admin_to_captive_portal; 
                   CREATE PROCEDURE redirect_admin_to_captive_portal( IN new_state VARCHAR(32) )
                   BEGIN
                      DECLARE done INT DEFAULT 0 ;
                      DECLARE mac_address varchar(18);
                      DECLARE cursor_admin_mac_address CURSOR FOR SELECT macaddr FROM found WHERE admin='yes' AND upper(authorized) <> 'DISABLE_TO_BROWSE';
                      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done =1 ;
                        OPEN cursor_admin_mac_address ;
          
                     read_loop: LOOP
                        FETCH cursor_admin_mac_address INTO mac_address;
                         IF done = 1 THEN
                            LEAVE read_loop;
                         END IF;                         
		        SET @ret= redis_command_v2(\"SET\",
                                                 concat('authorization-mac-',mac_address),
                                                 new_state);

                        END LOOP read_loop; 
                        CLOSE cursor_admin_mac_address ;
                   END;##"
	    act "   * creating procedure to redirect admin to captive portal"
	    func $PROC
	    print $PROC | $sql $db[things]

	    
	    act "     * creating trigger on event insert  ..."
	    print "DROP TRIGGER IF EXISTS create_things_on_event_insert;" | $sql $db[things]
   

	    
	    # This trigger :
	    #   * insert a things to which is related an "event" (if it is not inserted yet).
	    #   * communicate on the admin to redirect to captive portal admin page.
	    #   
	    TRIGGER_ON_INSERT_EVENT="DELIMITER ##
                     CREATE TRIGGER create_things_on_event_insert
                     BEFORE INSERT ON event
                     FOR EACH ROW
                     BEGIN

                        call create_dns_entry( new.name,new.ip4,new.ip6);

                        INSERT INTO found(macaddr,ip4,ip6) 
                        select NEW.macaddr,NEW.ip4,NEW.ip6 from dual
                        WHERE not exists ( select macaddr from found where macaddr=NEW.macaddr);

                        CALL redirect_admin_to_captive_portal('admin_should_check');
                     END##"

	    func $TRIGGER_ON_INSERT_EVENT
	    print $TRIGGER_ON_INSERT_EVENT | $sql $db[things]

	    # This trigger :
	    #   * insert a things to which is related an "event" (if it is not inserted yet).
	    #   * communicate on the admin to redirect to captive portal admin page.
	    #   
	    TRIGGER_ON_INSERT_FOUND="DELIMITER ##
                     CREATE TRIGGER insert_entry_redis
                     BEFORE INSERT ON found
                     FOR EACH ROW
                     BEGIN
                        CALL create_dns_entry( new.name,new.ip4,new.ip6);	 
                     END##"

	    func $TRIGGER_ON_INSERT_FOUND
	    print $TRIGGER_ON_INSERT_FOUND | $sql $db[things]

	    # This trigger :
	    #   * disable l'authorization-mac- ....
	    #   quando lo state viene settato lo state ad off
	    # TODO !!!

	    touch $setted_up ;
	}
	# TODO: better check of error code if needed	
}



# takes a table description from stdin
# prints "create table" command on stdout
sql_create_table() {
    fn sql_create_table $*
    name="$1"
    req=(name)
    ckreq || return $?

    act "Create table [$name] if not exists ..."
    local cmd="CREATE TABLE IF NOT EXISTS $name ("
    for t in "${(f)$(cat)}"; do
        [[ "$t" = "" ]] && continue
        cmd+="${t},"
    done
    cmd[${#cmd}]=')'
    cmd+=';'

    print - "$cmd"
}

# search for a case insensitive string across all columns
# needs args: .idx, table, string
sql_search() {
    fn sql_search $*
    local idx="$1"
    local table="$2"
    local needle="$3"
    req=(sql db idx table needle)
    freq=($idx)
    ckreq || return $?

    local query="SELECT * from $table where "
    local c=0
    for o in "${(f)$(cat $idx)}"; do
        # skip newlines
        [[ "$o" = "" ]] && continue
        # skip commends
        [[ "${o[1]}" = "#" ]] && continue

        [[ $c = 0 ]] || query+=" or "
        query+="${o[(w)1]} like '%$needle%'"
        c=$(( $c + 1 ))
    done
    print - "$query;" | $sql ${db[things]}
}


sql_map_insert() {
    # TODO:
}

# reads the pipe '|' separated list of results from an SQL query from stdin
# takes as first argument an .idx file (plain text two columns, key and type)
# prints out a string (2 columns formatted for maps) with key and value
sql_idx_parse() {
    fn sql_query $*
    local idx="$1"
    req=(sql db idx)
    freq=($idx)
    ckreq || return $?

    func "parse sql idx: $idx"

    local values="`awk -F '|' '
/^#/ { next }
/^$/ { next }
{ if(NF<1) next;
  for(c=1;c<=NF;c++)
    if($c==\"\") printf \" %\"
    else {
      gsub(/ /,"_",$c)
      printf " " $c
    }
  exit }
'`"
    local c=1

    for o in "${(f)$(cat $idx)}"; do
        # skip newlines
        [[ "$o" = "" ]] && continue
        # skip commends
        [[ "${o[1]}" = "#" ]] && continue
        # TODO: use ${o[(w)2]} for typechecking

        local val="${values[(w)$c]}"
        [[ "$val" = "%" ]] ||
            print - "${o[(w)1]} $val"
        c=$(( $c + 1 ))
    done
}

